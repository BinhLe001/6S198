<!-- Contributed by David Bau, in the public domain -->

<template>
<div class="vectorlist">
  <div v-for="(vector, index) in vectors" class="vector">
    <input v-model="vector.text">
    <button @click="selectVector(index)">&rarr;</button>
    <button @click="deleteVector(index)">x</button>
  </div>
  <div class="operation">
  <button @click="saveVector()">Save current sample</button>
  </div>
  <div class="operation">
  <!-- TODO: Change this button to do something interesting -->
  <button @click="applyVectorMath()">Apply vector math</button>
  </div>
  <div class="operation">
  <button @click="applyBoldVectorMath()">Apply bold vector math - single</button>
  </div>
  <div class="operation">
  <button @click="applyBoldVectorMathMult()">Apply bold vector math - 10</button>
  </div>
  <div class="operation">
  <button @click="applyBoldVectorMathDiff()">Apply bold vector math - Diff</button>
  </div>
  <div class="operation">
  <button @click="applyWildVectorMathMult()">Apply wild vector math - 10</button>
  </div>
  <div class="operation">
  <button @click="applyBackgroundVectorMathDiff()">Apply background vector math - Diff</button>
  </div>
    <div class="operation">
  <button @click="applyLowercaseVectorMath()">Apply lowercase vector math</button>
  </div>
      <div class="operation">
  <button @click="applyFavoriteVectorMath()">Apply favorite vector math</button>
  </div>
  <!-- TODO: Add the KNN font ID button below -->
  <div class="operation">
    <button @click="getKNN()">Show nearest neighbor</button>
  </div>
  <div class="operation">
    <button @click="getAvgFont()">Get average font</button>
  </div>
  <div class="operation">
    <button @click="getAvgBold()">Get average bold</button>
  </div>
  <div class="operation">
    <button @click="getBoldDiff()">Get bold difference</button>
  </div>
  <div class="operation">
    <button @click="getAvgWild()">Get average wild</button>
  </div>
  <div class="operation">
    <button @click="getBackgroundDiff()">Get background difference</button>
  </div>
</div>
</template>

<script>
import { Array1D, ENV } from "deeplearn";

const math = ENV.math;

//This json file includes all of the Font IDs in our database and their 40-dimensional logits vector.
var json = require("../embeddings.json");
var background = [
  [
    0.02679932489991188,
    0.266422837972641,
    -0.2750564515590668,
    0.13127949833869934,
    0.03265133500099182,
    0.10567507147789001,
    0.19657470285892487,
    -0.011860699392855167,
    -0.03457171097397804,
    -0.25224581360816956,
    0.0982452929019928,
    0.23509086668491364,
    0.14195090532302856,
    -0.17025738954544067,
    -0.07946868985891342,
    0.27618563175201416,
    0.268991082906723,
    0.06307348608970642,
    -0.3353993892669678,
    -0.15171174705028534,
    0.09065599739551544,
    0.2060467004776001,
    0.12369291484355927,
    0.046330712735652924,
    0.040680717676877975,
    0.18649636209011078,
    0.0676969364285469,
    -0.1267433911561966,
    -0.015408946201205254,
    -0.4563278555870056,
    0.04080629348754883,
    -0.12086998671293259,
    0.1398029327392578,
    0.07565654814243317,
    -0.20209212601184845,
    -0.24319066107273102,
    0.05239230766892433,
    0.12419718503952026,
    0.15223214030265808,
    0.3997093737125397
  ],

  [
    0.022939473390579224,
    0.09688671678304672,
    -0.09886776655912399,
    0.33409741520881653,
    0.4382815659046173,
    -0.005046364385634661,
    0.0157335065305233,
    -0.09543886035680771,
    -0.06529082357883453,
    -0.336820125579834,
    -0.10435432195663452,
    0.052246030420064926,
    0.033445026725530624,
    -0.16188901662826538,
    0.13606242835521698,
    0.1075657308101654,
    -0.0404764749109745,
    0.033332545310258865,
    -0.08003854006528854,
    -0.27553418278694153,
    -0.11754916608333588,
    -0.12076229602098465,
    0.08192631602287292,
    0.26606112718582153,
    0.3204744756221771,
    -0.02852441743016243,
    0.21394874155521393,
    -0.042777299880981445,
    0.024102041497826576,
    -0.36909955739974976,
    -0.30049341917037964,
    -0.342619925737381,
    0.052802760154008865,
    -0.2848959267139435,
    -0.09947221726179123,
    -0.3006196618080139,
    -0.0052099889144301414,
    0.021279320120811462,
    0.32381734251976013,
    0.13826578855514526
  ],

  [
    -0.10568347573280334,
    0.20772075653076172,
    -0.04646831005811691,
    0.05064024776220322,
    0.1641094833612442,
    -0.12460393458604813,
    0.03686914220452309,
    -0.131742924451828,
    -0.07686284929513931,
    -0.17058157920837402,
    -0.03366684541106224,
    0.0726049542427063,
    -0.08600584417581558,
    -0.17687158286571503,
    0.07811477035284042,
    0.20323701202869415,
    -0.0009236708283424377,
    -0.012501761317253113,
    -0.1185409352183342,
    -0.15909141302108765,
    -0.17119526863098145,
    0.01687941513955593,
    -0.03844572603702545,
    0.09231343865394592,
    -0.07555016875267029,
    0.028885511681437492,
    -0.1705465018749237,
    0.01658218912780285,
    -0.2062634974718094,
    -0.15116389095783234,
    0.04007623717188835,
    -0.04201041907072067,
    0.20475773513317108,
    0.12865816056728363,
    0.015169866383075714,
    -0.3401464521884918,
    -0.17228779196739197,
    -0.11397022753953934,
    0.06222611293196678,
    0.09479314833879471
  ],

  [
    -0.03486216440796852,
    0.08140657842159271,
    0.05796365067362785,
    -0.07186491787433624,
    0.09105336666107178,
    0.15666230022907257,
    -0.10141482204198837,
    -0.16939958930015564,
    0.055719632655382156,
    -0.13929176330566406,
    0.21312449872493744,
    -0.06105327978730202,
    -0.22090893983840942,
    -0.12678954005241394,
    -0.2664339542388916,
    0.05666753649711609,
    0.28236350417137146,
    0.31984204053878784,
    -0.2580595314502716,
    -0.03224792331457138,
    -0.019891761243343353,
    -0.03312847018241882,
    -0.054838843643665314,
    0.23595818877220154,
    0.2234998494386673,
    0.03863834589719772,
    0.021535420790314674,
    0.1307348757982254,
    0.17110352218151093,
    -0.08149752020835876,
    -0.28261134028434753,
    -0.420453280210495,
    0.08891920000314713,
    0.15526078641414642,
    -0.012460305355489254,
    -0.059670839458703995,
    -0.20322051644325256,
    0.09902866184711456,
    0.2823794186115265,
    0.31182461977005005
  ],

  [
    -0.1851569414138794,
    0.03125191107392311,
    0.11457064002752304,
    0.09484294056892395,
    0.21280114352703094,
    -0.12724833190441132,
    0.04159330204129219,
    -0.13313893973827362,
    0.04058206081390381,
    -0.17660227417945862,
    0.08917935192584991,
    -0.03707423061132431,
    -0.3400106728076935,
    -0.07059112191200256,
    -0.10694582015275955,
    -0.13588695228099823,
    0.20695102214813232,
    0.12607085704803467,
    -0.03802790120244026,
    -0.14003348350524902,
    -0.20752812922000885,
    0.1322396844625473,
    -0.13840772211551666,
    0.005926164332777262,
    0.024958055466413498,
    -0.15073654055595398,
    -0.13565826416015625,
    0.0850086584687233,
    -0.006449781358242035,
    0.00011590641952352598,
    -0.19605839252471924,
    -0.12758250534534454,
    -0.02944614551961422,
    0.03951485827565193,
    0.1284523606300354,
    -0.19673724472522736,
    0.011428145691752434,
    0.003904176875948906,
    0.2782064974308014,
    0.21095803380012512
  ],

  [
    0.044593628495931625,
    0.34311503171920776,
    0.06420747935771942,
    0.3138359785079956,
    -0.37889477610588074,
    -0.18945342302322388,
    0.006630740128457546,
    0.1426406353712082,
    -0.05303085595369339,
    -0.3647599220275879,
    0.13796187937259674,
    0.37382176518440247,
    -0.1151157021522522,
    -0.15030668675899506,
    -0.438387006521225,
    -0.14953665435314178,
    0.2582263648509979,
    0.13362501561641693,
    -0.2936226725578308,
    -0.23406457901000977,
    0.12687169015407562,
    -0.009930497035384178,
    -0.1053423136472702,
    -0.029865093529224396,
    0.05820099264383316,
    0.2262018620967865,
    -0.20583538711071014,
    0.0856017917394638,
    0.06287013739347458,
    -0.053366612643003464,
    -0.15646329522132874,
    -0.036798592656850815,
    -0.08802037686109543,
    0.44080907106399536,
    -0.1442752182483673,
    0.19375959038734436,
    0.004371337126940489,
    0.007090827915817499,
    0.11650870740413666,
    0.13436439633369446
  ],

  [
    0.014573199674487114,
    -0.11311017721891403,
    0.03145671263337135,
    0.13744954764842987,
    0.08969748020172119,
    0.03685902804136276,
    -0.006201157346367836,
    0.0971597209572792,
    0.0887933224439621,
    0.09981947392225266,
    0.05722382664680481,
    0.12616264820098877,
    0.1718858778476715,
    0.03078918159008026,
    0.0906594768166542,
    -0.0029011478181928396,
    -0.17489232122898102,
    -0.06571126729249954,
    -0.09136858582496643,
    -0.1060829684138298,
    0.041853487491607666,
    -0.12142936885356903,
    0.057336632162332535,
    0.13215897977352142,
    0.13582700490951538,
    -0.0002996146504301578,
    -0.04689093679189682,
    -0.16406697034835815,
    0.0002863729605451226,
    -0.037884362041950226,
    0.113946832716465,
    -0.0798434466123581,
    -0.07472702860832214,
    -0.08908712863922119,
    -0.01343279518187046,
    0.08681775629520416,
    -0.07825411856174469,
    -0.042813125997781754,
    -0.03785698488354683,
    0.010204825550317764
  ],

  [
    -0.20519176125526428,
    0.22628946602344513,
    0.18839479982852936,
    0.12028026580810547,
    0.18411605060100555,
    0.1487516313791275,
    -0.03933579847216606,
    -0.07631663233041763,
    0.2936849892139435,
    -0.01121628936380148,
    0.142075315117836,
    0.004359781742095947,
    -0.2181444764137268,
    0.08370164036750793,
    0.08821653574705124,
    -0.11472532153129578,
    0.2294296771287918,
    -0.29216691851615906,
    -0.21363697946071625,
    -0.1852269321680069,
    -0.234614297747612,
    -0.07814980298280716,
    -0.030601680278778076,
    0.02073048986494541,
    -0.002798577304929495,
    0.19297552108764648,
    -0.013563328422605991,
    -0.04887432977557182,
    0.2224590927362442,
    -0.07609042525291443,
    -0.1003245934844017,
    0.03180203214287758,
    -0.1222754642367363,
    0.08871970325708389,
    0.17893773317337036,
    0.15649746358394623,
    0.18268983066082,
    -0.02463650330901146,
    -0.12175547331571579,
    0.09106330573558807
  ],

  [
    0.288408100605011,
    -0.08223231881856918,
    -0.076845183968544,
    0.09025298058986664,
    0.018922969698905945,
    0.02736317738890648,
    -0.24273256957530975,
    0.37008994817733765,
    -0.027470968663692474,
    0.3992617428302765,
    0.0097519401460886,
    -0.07837013900279999,
    -0.1263040006160736,
    0.11174007505178452,
    0.20351359248161316,
    0.10768134146928787,
    -0.01738421805202961,
    0.2866515517234802,
    0.018839584663510323,
    0.5358821749687195,
    0.15862953662872314,
    0.3648938834667206,
    -0.2905823290348053,
    -0.4181053042411804,
    -0.44366031885147095,
    0.13077884912490845,
    -0.5086396336555481,
    -0.5078871250152588,
    -0.2628420293331146,
    0.09740952402353287,
    0.1400705873966217,
    0.3001396954059601,
    -0.36723238229751587,
    0.28652358055114746,
    -0.0022889261599630117,
    -0.2393844574689865,
    -0.06311085820198059,
    -0.039161279797554016,
    -0.20411871373653412,
    -0.390298068523407
  ],

  [
    0.15702101588249207,
    -0.06765862554311752,
    -0.16208553314208984,
    -0.0756152868270874,
    -0.16239123046398163,
    0.36907827854156494,
    -0.04587388411164284,
    -0.05987614765763283,
    -0.12430256605148315,
    0.14520220458507538,
    0.04802935943007469,
    -0.06287609785795212,
    -0.062278956174850464,
    0.019379353150725365,
    0.05708834156394005,
    -0.05801155045628548,
    0.2711172103881836,
    0.3699469268321991,
    -0.12466195970773697,
    0.28588172793388367,
    0.2262096107006073,
    0.4652112126350403,
    0.10928521305322647,
    -0.3079143464565277,
    -0.2941100597381592,
    0.1035638302564621,
    -0.08681458234786987,
    -7.839832687750459e-5,
    0.23231035470962524,
    0.20060576498508453,
    -0.09515561908483505,
    0.03942815586924553,
    0.020267657935619354,
    -0.1745671033859253,
    -0.17097444832324982,
    -0.1138777807354927,
    0.008350192569196224,
    -0.06601008027791977,
    0.23287427425384521,
    -0.12540511786937714
  ]
];
var nonBoldFonts = [
  [
    0.05237549543380737,
    0.0728234052658081,
    0.11691199243068695,
    -0.05981186777353287,
    -0.18724612891674042,
    0.11216840147972107,
    -0.0784888043999672,
    -0.06233111396431923,
    0.07618322968482971,
    0.034886304289102554,
    0.06441003829240799,
    -0.08883621543645859,
    0.015164283104240894,
    -0.0003436068072915077,
    -0.13901664316654205,
    -0.057327691465616226,
    -0.04626337066292763,
    -0.04745899885892868,
    0.060828883200883865,
    -0.0019554581958800554,
    -0.013476083986461163,
    -0.08699066936969757,
    -0.008786017075181007,
    -0.08378944545984268,
    0.12763014435768127,
    0.030433237552642822,
    -0.028541497886180878,
    0.016513677313923836,
    0.0029426533728837967,
    0.03862499073147774,
    0.00039665642543695867,
    0.08381538093090057,
    -0.0368385910987854,
    0.1341867297887802,
    -0.004723602905869484,
    0.06463500112295151,
    0.13117949664592743,
    0.005032040178775787,
    -0.12675341963768005,
    -0.01717289723455906
  ],

  [
    0.060838114470243454,
    -0.013815824873745441,
    -0.009833709336817265,
    0.06251607090234756,
    -0.12931369245052338,
    0.025106940418481827,
    -0.1379881054162979,
    -0.04071413725614548,
    0.03267702832818031,
    0.04239577800035477,
    0.13510504364967346,
    0.07510393857955933,
    -0.05828804522752762,
    -0.057700347155332565,
    0.026631303131580353,
    -0.08205944299697876,
    -0.056363023817539215,
    0.03979635611176491,
    -0.007610267493873835,
    0.0504043810069561,
    -0.04365837946534157,
    -0.034510672092437744,
    -0.11935002356767654,
    0.023755403235554695,
    0.03979826346039772,
    -0.02304481342434883,
    -0.13618052005767822,
    -0.10297185927629471,
    0.16937971115112305,
    -0.0643082782626152,
    0.005497663747519255,
    0.07369037717580795,
    -0.1125415489077568,
    0.09415094554424286,
    0.05534643679857254,
    0.1648736149072647,
    0.023071255534887314,
    0.04549485445022583,
    -0.06387857347726822,
    0.1308468133211136
  ],

  [
    0.09435772150754929,
    -0.03749778866767883,
    0.1151883602142334,
    0.0813569575548172,
    -0.060867972671985626,
    -0.028510848060250282,
    -0.10408652573823929,
    -0.007765559013932943,
    0.05598173663020134,
    0.15711164474487305,
    0.04081670939922333,
    0.01111807394772768,
    -0.040788684040308,
    -0.04889233037829399,
    -0.003793631913140416,
    -0.1274443417787552,
    -0.2499094158411026,
    0.010680281557142735,
    -0.10955861955881119,
    0.004279257729649544,
    -0.08864446729421616,
    -0.1339198797941208,
    -0.12176832556724548,
    0.0761074498295784,
    0.1303982436656952,
    0.04844160005450249,
    -0.17278467118740082,
    -0.15995584428310394,
    0.20992064476013184,
    -0.09468615800142288,
    0.01135963574051857,
    0.06064888462424278,
    -0.13349053263664246,
    0.067459836602211,
    0.10001862794160843,
    0.19399382174015045,
    0.06808280944824219,
    -0.029218319803476334,
    0.0065034618601202965,
    0.0502503328025341
  ],

  [
    -0.021283864974975586,
    -0.07535076141357422,
    0.11044198274612427,
    0.053574927151203156,
    -0.11206716299057007,
    0.07903055101633072,
    -0.047602616250514984,
    0.11927622556686401,
    -0.0019653383642435074,
    0.09056901186704636,
    0.13757675886154175,
    -0.12418127804994583,
    -0.0815451368689537,
    0.011231291107833385,
    0.10353769361972809,
    -0.1268470138311386,
    -0.16172455251216888,
    -0.025830483064055443,
    -0.10334761440753937,
    -0.03208647295832634,
    0.06407797336578369,
    -0.20415687561035156,
    -0.0787644237279892,
    -0.034446749836206436,
    0.05980449542403221,
    0.050695281475782394,
    -0.1952926516532898,
    -0.1987239122390747,
    0.19410081207752228,
    -0.055302973836660385,
    0.053734421730041504,
    -0.00950729288160801,
    -0.1538522094488144,
    -0.004983650054782629,
    0.10412948578596115,
    0.16056892275810242,
    -0.0005996095715090632,
    -0.03962366655468941,
    -0.11746423691511154,
    -0.09092363715171814
  ],

  [
    -0.03275471180677414,
    -0.057235412299633026,
    0.030768390744924545,
    0.08188622444868088,
    -0.005002008285373449,
    0.10202758759260178,
    -0.0977790430188179,
    0.06912367045879364,
    0.07094220072031021,
    0.11018460988998413,
    0.016764607280492783,
    0.022407125681638718,
    0.005050548352301121,
    0.0341852642595768,
    0.05011272057890892,
    -0.10617845505475998,
    -0.10463808476924896,
    -0.06017136946320534,
    -0.017189187929034233,
    0.03893542289733887,
    -0.027896428480744362,
    -0.10151407122612,
    -0.12401760369539261,
    -0.06664179265499115,
    0.12374390661716461,
    0.047725945711135864,
    -0.05051931366324425,
    -0.09373418241739273,
    0.10647393018007278,
    0.017462018877267838,
    0.08583543449640274,
    0.10787397623062134,
    -0.06416650861501694,
    0.05432261899113655,
    0.032351117581129074,
    0.1544046849012375,
    0.11388026177883148,
    0.026153692975640297,
    -0.15473845601081848,
    -0.022396354004740715
  ],

  [
    -0.003090557176619768,
    -0.08858015388250351,
    0.14628174901008606,
    0.042823225259780884,
    -0.11936388909816742,
    0.045479707419872284,
    -0.08486946672201157,
    0.01255664974451065,
    0.09768520295619965,
    -0.09563527256250381,
    0.07188480347394943,
    -0.019218286499381065,
    -0.06153608486056328,
    -0.025287361815571785,
    0.027858803048729897,
    -0.12053224444389343,
    -0.052018698304891586,
    -0.06067154183983803,
    -0.0032475038897246122,
    -0.0314410999417305,
    -0.13106729090213776,
    -0.122099369764328,
    -0.09821231663227081,
    0.03724298253655434,
    0.009901853278279305,
    0.06774255633354187,
    -0.06508224457502365,
    -0.06765999644994736,
    0.10059268027544022,
    -0.010987536050379276,
    0.0017900916282087564,
    0.06358274817466736,
    -0.05841800943017006,
    -0.03068370185792446,
    0.13030481338500977,
    0.12962627410888672,
    0.03140648454427719,
    -0.13438209891319275,
    0.015576453879475594,
    0.07099238783121109
  ],

  [
    0.011672654189169407,
    -0.10272003710269928,
    0.10854268074035645,
    0.09805865585803986,
    -0.12971113622188568,
    0.007292857393622398,
    0.016959475353360176,
    0.08023136109113693,
    -0.03924670070409775,
    -0.026703374460339546,
    0.06217249855399132,
    -0.032812803983688354,
    -0.1518261581659317,
    0.15095573663711548,
    0.01122357603162527,
    -0.012860086746513844,
    -0.037512414157390594,
    0.13976693153381348,
    -0.11435458809137344,
    -0.050446853041648865,
    -0.1792069375514984,
    -0.08355061709880829,
    -0.02998974360525608,
    0.0740705132484436,
    0.09886772930622101,
    0.018483173102140427,
    -0.18135276436805725,
    -0.13401339948177338,
    0.22547779977321625,
    -0.13984543085098267,
    0.12290934473276138,
    -0.04869857802987099,
    0.027186529710888863,
    0.04327591881155968,
    0.023389294743537903,
    0.213628351688385,
    0.016478147357702255,
    -0.09255976974964142,
    0.1071772500872612,
    0.08768930286169052
  ],

  [
    0.08132786303758621,
    0.0942627340555191,
    0.06657597422599792,
    -0.01774754747748375,
    0.01362178847193718,
    0.03468307480216026,
    -0.09916726499795914,
    -0.0337408222258091,
    0.02240191213786602,
    0.044009264558553696,
    -0.05938581004738808,
    0.008789632469415665,
    0.045360054820775986,
    -0.0689716637134552,
    0.05284672603011131,
    -0.08770370483398438,
    -0.11039689928293228,
    -0.049342550337314606,
    0.03422006592154503,
    -0.08382245898246765,
    0.024056825786828995,
    -0.09115782380104065,
    -0.04093555361032486,
    -0.020593952387571335,
    0.12671688199043274,
    -0.03930022940039635,
    -0.1487884819507599,
    -0.019699258729815483,
    0.10844733566045761,
    -0.0791729986667633,
    -0.012370473705232143,
    -0.01407625526189804,
    -0.03161546587944031,
    -0.06838029623031616,
    -0.08999674022197723,
    0.14579211175441742,
    0.19670668244361877,
    -0.010310212150216103,
    -0.12784969806671143,
    -0.0010595861822366714
  ],

  [
    0.022680126130580902,
    -0.1413470357656479,
    0.09304129332304001,
    0.06580029428005219,
    -0.02125220187008381,
    0.012594979256391525,
    -0.06766066700220108,
    0.10888441652059555,
    0.04541667178273201,
    0.09387920051813126,
    -0.0006310747703537345,
    -0.08147057890892029,
    0.05148285627365112,
    0.019877012819051743,
    0.037678103893995285,
    -0.13203281164169312,
    -0.11269515752792358,
    -0.0010030276607722044,
    -0.017583807930350304,
    0.0021292397286742926,
    0.009068593382835388,
    -0.086745485663414,
    -0.11342853307723999,
    0.04014360532164574,
    0.09011350572109222,
    0.0614810511469841,
    -0.08454500883817673,
    -0.12961377203464508,
    0.11471249908208847,
    -0.05650043487548828,
    0.1013031005859375,
    0.007821144536137581,
    -0.10313032567501068,
    0.037259574979543686,
    -0.01860133558511734,
    0.07253149896860123,
    0.10163259506225586,
    -0.010532896034419537,
    -0.12289505451917648,
    -0.0624723955988884
  ],

  [
    0.0343124084174633,
    -0.18235521018505096,
    0.047484301030635834,
    0.06717292964458466,
    -0.08639733493328094,
    0.09177634119987488,
    0.036834780126810074,
    0.0480949692428112,
    0.030864093452692032,
    0.03855667635798454,
    0.07372050732374191,
    -0.014917680062353611,
    -0.04067893698811531,
    -0.062042687088251114,
    0.030001454055309296,
    -0.15135124325752258,
    -0.1323070228099823,
    0.0064491224475204945,
    -0.05942675843834877,
    0.03082926943898201,
    -0.03767400607466698,
    -0.08407824486494064,
    -0.024581898003816605,
    -0.07315173745155334,
    0.11720921099185944,
    0.06973204016685486,
    -0.013452316634356976,
    -0.18889576196670532,
    0.12804031372070312,
    -0.09431702643632889,
    -0.036663904786109924,
    -0.08052946627140045,
    -0.17279858887195587,
    0.061839509755373,
    -0.06513682007789612,
    0.10134478658437729,
    0.13268433511257172,
    -0.15961362421512604,
    0.013409922830760479,
    0.06842179596424103
  ]
];
export default {
  props: {
    selectedSample: {},
    model: {},
    vectors: { type: Array, default: () => [{ text: "0" }] }
  },
  methods: {
    saveVector() {
      this.selectedSample
        .data()
        .then(x =>
          this.vectors.push({ text: Array.prototype.slice.call(x).join(",") })
        );
    },
    deleteVector(index) {
      this.vectors.splice(index, 1);
    },
    selectVector(index) {
      this.$emit("select", {
        selectedSample: this.model.fixdim(
          Array1D.new(this.vectors[index].text.split(",").map(parseFloat))
        )
      });
    },
    // TODO: Add useful vector space operations here -->
    applyVectorMath() {
      this.$emit("select", {
        selectedSample: math.add(
          this.selectedSample,
          this.model.fixdim(
            Array1D.new([
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ])
          )
        )
      });
    },

    applyBoldVectorMath() {
      this.$emit("select", {
        selectedSample: math.add(
          this.selectedSample,
          this.model.fixdim(
            Array1D.new([
              0.053,
              0.026,
              -0.06,
              -0.014,
              -0.093,
              -0.018,
              0.087,
              0.096,
              -0.039,
              0.071,
              0.111,
              -0.022,
              -0.007,
              0.022,
              -0.032,
              0.141,
              0.126,
              -0.015,
              -0.075,
              0.12,
              0.068,
              0.021,
              0.104,
              -0.065,
              -0.085,
              -0.018,
              -0.038,
              -0.059,
              -0.051,
              -0.056,
              0.154,
              -0.044,
              -0.116,
              0.038,
              -0.144,
              -0.103,
              -0.032,
              0.059,
              -0.076,
              -0.03
            ])
          )
        )
      });
    },
    applyBoldVectorMathMult() {
      this.$emit("select", {
        selectedSample: math.add(
          this.selectedSample,
          this.model.fixdim(
            Array1D.new([
              0.10585159845438531,
              -0.10442429747093808,
              -0.1475712223486467,
              -0.09243955530903557,
              -0.07858052858236161,
              0.18290330130945553,
              -0.034730622375553306,
              -0.03132394023916938,
              -0.07903598621487617,
              0.02985008814456788,
              0.050944631326604976,
              -0.0028608542316677895,
              -0.07010836010290818,
              -0.0030910120483233845,
              0.03260207231241194,
              0.012770775620910254,
              0.13417035328562965,
              0.20590756901285864,
              -0.07821050633422354,
              0.17970459095456384,
              0.15678324889052997,
              0.3128819059241902,
              0.07459229379045693,
              -0.09876061959022825,
              -0.20480759848247876,
              -0.03568299986760725,
              0.020076800284600307,
              -0.019981913771268657,
              0.048472252282821995,
              0.07653109382160685,
              -0.09258298774842512,
              -0.009878792927007784,
              0.03998960397968238,
              -0.05560506410388784,
              -0.11778948557647792,
              -0.117626844312657,
              -0.1092828990552913,
              -0.005372706631367857,
              0.209016507322138,
              -0.061629297441951086
            ])
          )
        )
      });
    },
    applyWildVectorMathMult() {
      this.$emit("select", {
        selectedSample: math.add(
          this.selectedSample,
          this.model.fixdim(
            Array1D.new([
              0.11826154115525159,
              0.00800847126678987,
              0.01799702816854485,
              0.020635207014327698,
              -0.060224463062530216,
              0.1812304733744399,
              -0.1221109547398307,
              0.058173818344419655,
              0.023698667487637562,
              0.05476066419346766,
              0.010105637748810377,
              -0.029259632976556368,
              0.0025633196558125996,
              -0.04523710597475821,
              0.1185006362423089,
              -0.1806584166532213,
              -0.07380613176660104,
              0.057805657355030154,
              -0.10016734085299751,
              0.04918283169073137,
              0.11675664884122935,
              0.01436482302167199,
              -0.0014060100709850137,
              -0.04873193982480602,
              -0.07984293421561067,
              -0.04054271497509696,
              -0.1507751481099562,
              -0.0321330887646499,
              0.1420873273164034,
              0.04376645580950109,
              0.038245976119386876,
              -0.015493273391092027,
              -0.05084422179921107,
              -0.050492731113494796,
              -0.11092528514564037,
              0.04921935185451399,
              0.08512659438631752,
              -0.05652962413362481,
              -0.08603391627019102,
              -0.05985423922538757
            ])
          )
        )
      });
    },

    applyBoldVectorMathDiff() {
      this.$emit("select", {
        selectedSample: math.add(
          this.selectedSample,
          this.model.fixdim(
            Array1D.new([
              0.06971528305439278,
              -0.056079783197492364,
              -0.23460680646821858,
              -0.1382435668259859,
              0.014415430882945657,
              0.13065534457564354,
              0.031904342211782934,
              -0.051473290333524345,
              -0.11513951718807221,
              -0.01817036895081401,
              -0.004213424550835043,
              0.0233012120006606,
              -0.03653632448986173,
              0.004275952273746953,
              0.019948032754473388,
              0.10850811712443828,
              0.23953560353256761,
              0.20797538061160595,
              -0.04934408215340227,
              0.18570330939255655,
              0.20586669081822037,
              0.4177131079137325,
              0.1593687901739031,
              -0.09445445239543915,
              -0.29637240935117004,
              -0.06429011328145862,
              0.12971673135180026,
              0.08688943330780603,
              -0.09417259764159099,
              0.12765398062765598,
              -0.11933626149257179,
              -0.03103612889535725,
              0.12747389394789935,
              -0.10052288644947112,
              -0.15228334944695235,
              -0.2666168032214046,
              -0.19435231044190004,
              0.029377069789916277,
              0.2695597056299448,
              -0.08888445889751892
            ])
          )
        )
      });
    },

    applyBackgroundVectorMathDiff() {
      this.$emit("select", {
        selectedSample: math.add(
          this.selectedSample,
          this.model.fixdim(
            Array1D.new([
              -0.02769948490895331,
              0.15219082618132235,
              -0.10281329778954387,
              0.06495687998831272,
              0.15279471273534,
              -0.008361215936020017,
              0.05256914002820849,
              -0.03614991488866508,
              -0.02936898060142994,
              -0.12964881891384722,
              0.011513621488120407,
              0.08689303714782,
              -0.050388147868216035,
              -0.05641063954681158,
              -0.043466043076477945,
              0.12946126621682197,
              0.23472308162599803,
              0.10099477556068451,
              -0.11972475114744156,
              -0.03890545540489256,
              0.0317861900664866,
              0.18505941703915596,
              0.04738568998873234,
              0.007089808071032167,
              -0.09366622637026012,
              0.03955898668791633,
              0.021177193522453307,
              0.05062543101957999,
              -0.11379211129387841,
              -0.038826520129077835,
              -0.11299986795929726,
              -0.10434291921555996,
              0.06645141392946244,
              0.027814506320282817,
              -0.058951735380105674,
              -0.24579513557255267,
              -0.10773739187279716,
              0.0368468954693526,
              0.16554256714880466,
              0.06613045427948236
            ])
          )
        )
      });
    },

    applyLowercaseVectorMath() {
      this.$emit("select", {
        selectedSample: math.add(
          this.selectedSample,
          this.model.fixdim(
            Array1D.new([
              -0.004942532628774643,
              -0.07328484207391739,
              0.034513525664806366,
              0.019032957032322884,
              -0.015905220061540604,
              0.06152321398258209,
              -0.1871122568845749,
              0.04357942193746567,
              0.09953876584768295,
              0.05912398174405098,
              0.043055836111307144,
              0.17550766468048096,
              0.06542328745126724,
              0.06288373470306396,
              0.09731853008270264,
              -0.042902424931526184,
              0.06424516439437866,
              0.1929529458284378,
              -0.05063191056251526,
              -0.023733656853437424,
              -0.0500059612095356,
              0.02477644383907318,
              0.04376647621393204,
              0.07174462080001831,
              -0.09566816687583923,
              0.1450151652097702,
              -0.04746896028518677,
              -0.029974093660712242,
              -0.08011502772569656,
              0.04058638587594032,
              0.09227140992879868,
              0.004374565090984106,
              0.08266919106245041,
              -0.14429737627506256,
              -0.1466885358095169,
              -0.09157875925302505,
              0.044546835124492645,
              -0.06776856631040573,
              -0.12380634993314743,
              -0.01908145472407341
            ])
          )
        )
      });
    },

    applyFavoriteVectorMath() {
      this.$emit("select", {
        selectedSample: math.add(
          this.selectedSample,
          this.model.fixdim(
            Array1D.new([
              -0.025461683049798012,
              -0.23435933887958527,
              -0.15585416555404663,
              -0.10034339874982834,
              -0.03975426405668259,
              0.07911230623722076,
              0.008117010816931725,
              -0.06785952299833298,
              0.07530611008405685,
              0.03977802395820618,
              -0.010279304347932339,
              0.002869515446946025,
              0.005043690092861652,
              -0.04781860485672951,
              0.014769729226827621,
              0.12194963544607162,
              0.10799593478441238,
              0.07827699929475784,
              0.010508894920349121,
              0.1468343734741211,
              0.1730700433254242,
              0.22666554152965546,
              0.0677373856306076,
              0.040987323969602585,
              -0.1958618015050888,
              0.0031067850068211555,
              -0.031068885698914528,
              -0.03981560841202736,
              -0.030804559588432312,
              -0.05747456103563309,
              -0.010100696235895157,
              -0.011405379511415958,
              0.048784270882606506,
              0.018165582790970802,
              -0.015511594712734222,
              -0.06213318929076195,
              -0.11283398419618607,
              -0.10172761231660843,
              0.11324237287044525,
              -0.025070974603295326
            ])
          )
        )
      });
    },
    //TODO: Implement getKNN to output the font ID of the nearest neighbor
    getKNN() {
      let mostSimilarValue = 0;
      let mostSimilarId = 0;
      let cosSimArray = new Array(json.length);
      let selectedPromise = this.selectedSample.data().then(sample => {
        for (let i = 0; i < json.length; i++) {
          cosSimArray[i] = this.getCosSimilar(sample, json[i]);
          // console.log('ID: ' + i + ', Sim: ' + cosSimArray[i]);
          if (cosSimArray[i] > mostSimilarValue) {
            mostSimilarValue = cosSimArray[i];
            mostSimilarId = i;
          }
        }
        return mostSimilarId;
      });
      return selectedPromise.then(id => {
        console.log("Most Similar ID: " + id);
        return id;
      });
    },

    getCosSimilar(v1, v2) {
      let dotProduct = 0;
      let v1Norm = 0;
      let v2Norm = 0;
      for (let i = 0; i < v1.length; i++) {
        dotProduct += v1[i] * v2[i];
        v1Norm += v1[i] * v1[i];
        v2Norm += v2[i] * v2[i];
      }
      return Math.abs(dotProduct / (Math.sqrt(v1Norm) * Math.sqrt(v2Norm)));
    },

    getAvgFont() {
      let avgFont = new Array(json[0].length);
      for (let i = 0; i < avgFont.length; i++) {
        avgFont[i] = 0;
      }
      for (let i = 0; i < json.length; i++) {
        for (let j = 0; j < json[i].length; j++) {
          avgFont[j] += json[i][j];
        }
      }
      for (let i = 0; i < avgFont.length; i++) {
        avgFont[i] /= json.length;
      }

      let mostSimilarValue = 0;
      let mostSimilarId = 0;
      let cosSimArray = new Array(json.length);
      for (let i = 0; i < json.length; i++) {
        cosSimArray[i] = this.getCosSimilar(avgFont, json[i]);
        // console.log('ID: ' + i + ', Sim: ' + cosSimArray[i]);
        if (cosSimArray[i] > mostSimilarValue) {
          mostSimilarValue = cosSimArray[i];
          mostSimilarId = i;
        }
      }
      console.log(mostSimilarId);
      console.log(avgFont);
      return avgFont;
    },

    getAvgBold() {
      let boldFonts = [
        5644,
        5642,
        5643,
        395,
        7920,
        23,
        7637,
        3869,
        3870,
        394,
        3868
      ];
      let avgBold = new Array(json[0].length);
      for (let i = 0; i < avgBold.length; i++) {
        avgBold[i] = 0;
      }
      for (let i = 0; i < boldFonts.length; i++) {
        for (let j = 0; j < json[boldFonts[i]].length; j++) {
          avgBold[j] += json[boldFonts[i]][j];
        }
      }
      for (let i = 0; i < avgBold.length; i++) {
        avgBold[i] /= boldFonts.length;
      }
      console.log(avgBold);
      return avgBold;
    },

    getAvgWild() {
      let wildFonts = [
        2223,
        2234,
        4404,
        4403,
        2737,
        3712,
        2235,
        7825,
        5813,
        2236,
        6005
      ];
      let avgWild = new Array(json[0].length);
      for (let i = 0; i < avgWild.length; i++) {
        avgWild[i] = 0;
      }
      for (let i = 0; i < wildFonts.length; i++) {
        for (let j = 0; j < json[wildFonts[i]].length; j++) {
          avgWild[j] += json[wildFonts[i]][j];
        }
      }
      for (let i = 0; i < avgWild.length; i++) {
        avgWild[i] /= wildFonts.length;
      }
      console.log(avgWild);
      return avgWild;
    },

    getBoldDiff() {
      let boldFonts = [5644, 5642, 5643, 395, 7920, 23, 7637, 3869, 3870, 394];
      let boldDiff = new Array(json[0].length);
      for (let i = 0; i < boldDiff.length; i++) {
        boldDiff[i] = 0;
      }
      for (let i = 0; i < boldFonts.length; i++) {
        for (let j = 0; j < json[boldFonts[i]].length; j++) {
          let difference = json[boldFonts[i]][j] - nonBoldFonts[i][j];
          boldDiff[j] += difference;
        }
      }
      for (let i = 0; i < boldDiff.length; i++) {
        boldDiff[i] /= boldFonts.length;
      }
      console.log(boldDiff);
      return boldDiff;
    },

    getBackgroundDiff() {
      let backDiff = new Array(json[0].length);
      for (let i = 0; i < backDiff.length; i++) {
        backDiff[i] = 0;
      }
      for (let i = 0; i < background.length; i++) {
        for (let j = 0; j < background[i].length; j++) {
          let difference = background[i][j] - nonBoldFonts[i][j];
          backDiff[j] += difference;
        }
      }
      for (let i = 0; i < backDiff.length; i++) {
        backDiff[i] /= background.length;
      }
      console.log(backDiff);
      return backDiff;
    }
  },
  watch: {
    model: function(val) {
      for (let i = 0; i < this.vectors.length; ++i) {
        let arr = this.vectors[i].text.split(",");
        if (arr.length > this.model.dimensions) {
          arr = arr.slice(0, this.model.dimensions);
        }
        while (arr.length < this.model.dimensions) {
          arr.push("0");
        }
        this.vectors[i].text = arr.join(",");
      }
    }
  }
};
</script>

<style scoped>
.vector,
.operation {
  border-top: 1px solid rgba(0, 0, 0, 0.1);
  white-space: nowrap;
}
</style>
